rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == userId || 
        isAdmin()
      );
    }
    
    // leads collection - authenticated users can create leads, users can read their own leads, admins can read/write all
    match /leads/{leadId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow write: if request.auth != null && isAdmin();
    }
    
    // quotes collection - clients can read their own quotes, admins can read/write all
    match /quotes/{quoteId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // tickets collection - clients can read/create their own tickets, admins can read/write all
    match /tickets/{ticketId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
    
    // projects collection - clients can read their own projects, admins can read/write all
    match /projects/{projectId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // pricing collection - public read access for services page, admins can write
    match /pricing/{pricingId} {
      allow read: if true; // Public read access for dynamic pricing on services page
      allow write: if request.auth != null && isAdmin(); // Only admins can update pricing
    }
    
    // blog collection - public read access for published posts, admins can write
    match /blog/{postId} {
      allow read: if true; // Public read access for blog posts
      allow write: if request.auth != null && isAdmin(); // Only admins can create/edit posts
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

